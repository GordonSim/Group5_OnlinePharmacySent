@page "/orderitems/delete"
@using Microsoft.EntityFrameworkCore
@using Group5_OnlinePharmacy.Domain
@inject IDbContextFactory<Group5_OnlinePharmacy.Data.Group5_OnlinePharmacyContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>


<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>OrderItem</h2>
    <hr />
    @if (orderitem is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Qty</dt>
            <dd class="col-sm-10">@orderitem.Qty</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">ItemPrice</dt>
            <dd class="col-sm-10">@orderitem.ItemPrice</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">OrderId</dt>
            <dd class="col-sm-10">@orderitem.OrderId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">MedicineId</dt>
            <dd class="col-sm-10">@orderitem.MedicineId</dd>
        </dl>
        <EditForm method="post" Model="orderitem" OnValidSubmit="DeleteOrderItem" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(orderitem is null)">Delete</button> |
            <a href="/orderitems">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private OrderItem? orderitem;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        orderitem = await context.OrderItem.FirstOrDefaultAsync(m => m.Id == Id);

        if (orderitem is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteOrderItem()
    {
        using var context = DbFactory.CreateDbContext();
        context.OrderItem.Remove(orderitem!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/orderitems");
    }
}
